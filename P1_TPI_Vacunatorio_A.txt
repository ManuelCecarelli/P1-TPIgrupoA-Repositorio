// verificar que no se pueda ingresar más turnos si la grilla ya se encuentra llena.
// agregar las funcionalidades de las consignas 4 y 5.
// recordr mostrar un mensaje de despedida al cerrar el programa.

Algoritmo Vacunatorio
	
	//variables p/datos del sistema
	Definir dias, horarios, maxTurnos, numTurnos Como Entero;
	
	//arreglos p/datos del sistema.
	Definir cantidadVacunas, auxEntero Como Entero;
	Definir salir, eleccion, nombresVacunas, disponibilidadAgenda, diasSemana, stockVacunas, auxCadena Como Cadena;
	Definir bandera, agendaTurnos Como Logico;
	
	//arreglos p/datos de los pacientes. Las columnas corresponden a:
	//0 = Nombre
	//1 = Apellido
	//2 = DNI
	//3 = Edad
	//4 = Vacunas
	//5 = Dia
	//6 = Horario
	Definir datosPacientes Como Cadena;
	
	stockVacunas <- "10";
	cantidadVacunas <- 6;
	horarios <- 8;
	dias <- 5;
	maxTurnos <- 40;
	numTurnos <- 0;
	bandera <- Falso;
	
	Dimension nombresVacunas[cantidadVacunas,2];
	Dimension disponibilidadAgenda[dias,horarios];
	Dimension diasSemana[dias];
	Dimension agendaTurnos[dias,horarios];
	
	Dimension datosPacientes[maxTurnos,7];
	
	inicializarAgenda(disponibilidadAgenda, agendaTurnos, diasSemana, nombresVacunas, dias, horarios, stockVacunas);
	
	Repetir
		Limpiar Pantalla;
		Escribir "Bienvenido al centro vacunatorio Sur2";
		Escribir "-Ingrese el N° de la opción deseada, o ingrese SALIR para cerrar la aplicación-";
		Escribir "1 - Reserva turno";
		Escribir "2 - Buscar Paciente";
		Escribir "3 - Ver agenda vacunatorio";
		Escribir "4 - Ordenar y mostrar lista pacientes";
		Escribir "      a. Por edad";
		Escribir "      b. Por vacuna a aplicar";
		Escribir "5 - Listado/s";
		Escribir "      a. Cantidad turnos otorgados por día";
		Escribir "      b. Cantidad de vacunas a aplicar por vacuna";
		Escribir "";
		Escribir Sin Saltar "Elección: ";
		
		Leer eleccion;
		
		Si Mayusculas(eleccion) <> "SALIR" Entonces
			Segun eleccion
				"1":
					Si agendaCompleta(agendaTurnos, dias, horarios) == Verdadero Entonces
						cargarAgenda(datosPacientes, disponibilidadAgenda, nombresVacunas, cantidadVacunas, agendaTurnos, diasSemana, dias, horarios, numTurnos);
					SiNo
						Escribir "La agenda está completa";
						Esperar Tecla;
					Fin Si
				"2":
					Escribir "Ingrese el DNI a buscar:";
					Leer auxCadena;
					
					Si validarDNI(auxCadena) Entonces
						auxEntero <- buscarPaciente(datosPacientes, numTurnos, auxCadena)
						Si auxEntero == 99 Entonces
							Escribir "El DNI ingresado no se encuentra en la base de datos";
						SiNo
							mostrarDatos(datosPacientes, auxEntero);
						Fin Si
					SiNo
						Escribir "El DNI ingresado no es válido";
					FinSi
					Esperar Tecla;
				"3":
					Escribir "";
					mostrarTurnosDisponibles(disponibilidadAgenda, agendaTurnos, diasSemana, dias, horarios);
					Esperar Tecla;
				"4":
					Repetir
						Escribir "Ingrese la opción para ordenar:";
						Escribir "a. Por edad";
						Escribir "b. Por vacuna";
						Leer auxCadena;
						Segun auxCadena Hacer
							"a":
								ordenarPacientesEdad(datosPacientes, numTurnos, 7);
								mostrarListaPacientes(datosPacientes, numTurnos, 7);
								bandera <- Verdadero;
								Esperar Tecla;
							"b":
								ordenarPacientesVacuna(datosPacientes, numTurnos, 7);
								mostrarListaPacientes(datosPacientes, numTurnos, 7);
								bandera <- Verdadero;
								Esperar Tecla;
							De Otro Modo:
								Escribir "La opción ingresada no es válida, reintente";
								Esperar Tecla;
						Fin Segun
					Mientras Que bandera == Falso;
				"5":
					Repetir
						Escribir "Ingrese la opción deseada: ";
						Escribir "   a. Cantidad turnos otorgados por día";
						Escribir "   b. Cantidad de vacunas a aplicar por vacuna";
						Leer auxCadena;
						Segun auxCadena Hacer
							"a":
								Repetir
									Escribir "Ingrese el día que desea para ver los turnos: ";
									Para i<-0 Hasta 4 Con Paso 1 Hacer
										Escribir i+1, " - ", diasSemana[i];
									Fin Para
									Leer auxCadena;
									Segun auxCadena Hacer
										"1","2","3","4","5":
											auxEntero <- ConvertirANumero(auxCadena);
											auxCadena <- diasSemana[auxEntero-1];
											mostrarListaPacientesDia(datosPacientes, numTurnos, 7, auxCadena);
											bandera <- Verdadero;
											Esperar Tecla;
										De Otro Modo:
											Escribir "La opción ingresada no es válida, reintente";
											Esperar Tecla;
									Fin Segun
								Mientras Que bandera == Falso;
							"b":
								Repetir
									Escribir "Ingrese la vacuna que desea para ver los turnos: ";
									Para i<-0 Hasta 5 Con Paso 1 Hacer
										Escribir i+1, " - ", nombresVacunas[i,0];
									Fin Para
									Leer auxCadena;
									Segun auxCadena Hacer
										"1","2","3","4","5","6":
											auxEntero <- ConvertirANumero(auxCadena);
											auxCadena <- nombresVacunas[auxEntero-1,0];
											mostrarListaPacientesVacuna(datosPacientes, numTurnos, 7, auxCadena);
											bandera <- Verdadero;
											Esperar Tecla;
										De Otro Modo:
											Escribir "La opción ingresada no es válida, reintente";
											Esperar Tecla;
									Fin Segun
								Mientras Que bandera == Falso;
							De Otro Modo:
								Escribir "La opción ingresada no es válida, reintente";
								Esperar Tecla;
						Fin Segun
					Mientras Que bandera == Falso;
				De Otro Modo:
					Escribir "La opción ingresada no es correcta. Reintente";
					Esperar Tecla;
			FinSegun
		Fin Si
	Mientras Que Mayusculas(eleccion) <> "SALIR";
	
FinAlgoritmo

SubProceso inicializarAgenda(arrayH, arrayL, arrayD, arrayV, n, m, stock)
	arrayH[0,0] <- "1.8:00";
	arrayH[0,1] <- "2.8:30";
	arrayH[0,2] <- "3.9:00";
	arrayH[0,3] <- "4.9:30";
	arrayH[0,4] <- "5.10:00";
	arrayH[0,5] <- "6.10:30";
	arrayH[0,6] <- "7.11:00";
	arrayH[0,7] <- "8.11:30";
	arrayH[1,0] <- "1.8:00";
	arrayH[1,1] <- "2.8:30";
    arrayH[1,2] <- "3.9:00";
	arrayH[1,3] <- "4.9:30";
	arrayH[1,4] <- "5.10:00";
	arrayH[1,5] <- "6.10:30";
	arrayH[1,6] <- "7.11:00";
	arrayH[1,7] <- "8.11:30";
	arrayH[2,0] <- "1.8:00";
    arrayH[2,1] <- "2.8:30";
	arrayH[2,2] <- "3.9:00";
	arrayH[2,3] <- "4.9:30";
	arrayH[2,4] <- "5.10:00";
	arrayH[2,5] <- "6.10:30";
	arrayH[2,6] <- "7.11:00";
	arrayH[2,7] <- "8.11:30";
	arrayH[3,0] <- "1.8:00";
    arrayH[3,1] <- "2.8:30";
	arrayH[3,2] <- "3.9:00";
	arrayH[3,3] <- "4.9:30";
	arrayH[3,4] <- "5.10:00";
	arrayH[3,5] <- "6.10:30";
	arrayH[3,6] <- "7.11:00";
	arrayH[3,7] <- "8.11:30";
	arrayH[4,0] <- "1.8:00";
    arrayH[4,1] <- "2.8:30";
	arrayH[4,2] <- "3.9:00";
	arrayH[4,3] <- "4.9:30";
	arrayH[4,4] <- "5.10:00";
	arrayH[4,5] <- "6.10:30";
	arrayH[4,6] <- "7.11:00";
	arrayH[4,7] <- "8.11:30";
	
	arrayD[0] <- "Lunes";
	arrayD[1] <- "Martes";
	arrayD[2] <- "Miercoles";
	arrayD[3] <- "Jueves";
	arrayD[4] <- "Viernes";
	
	arrayV[0,0] <- "Neumococo conjugada";
	arrayV[1,0] <- "Poliomielitis (IPV o Salk)";
	arrayV[2,0] <- "Quintuple (o pentavalente)";
	arrayV[3,0] <- "Rotavirus";
	arrayV[4,0] <- "Meningococo";
	arrayV[5,0] <- "Triple Viral";
	arrayV[0,1] <- stock;
	arrayV[1,1] <- stock;
	arrayV[2,1] <- stock;
	arrayV[3,1] <- stock;
	arrayV[4,1] <- stock;
	arrayV[5,1] <- stock;
	
	Para i<-0 hasta n-1 con paso 1 Hacer
		Para j<-0 hasta m-1 con paso 1 hacer
			arrayL[i,j] <- Verdadero;
		FinPara
	FinPara
	
FinSubProceso

SubProceso cargarAgenda(arrayPacientes, arrayH, arrayV, cant, arrayL, arrayD, n, m, num Por Referencia)
	
	Definir continuar, dia, horario Como Caracter;
	Definir bandera Como Logico;
	bandera <- Falso;
	
	Repetir
		Limpiar Pantalla
		mostrarturnosdisponibles(arrayH, arrayL, arrayD, n, m);
		
		Repetir
			Escribir "Ingrese el dia del turno";
			Para i<-0 Hasta n-1 Con Paso 1 Hacer
				Escribir i+1, " - ", arrayD[i];
			Fin Para
			Escribir Sin Saltar "Opción: ";
			Leer dia;
			Segun dia Hacer
				"1","2","3","4","5":
					bandera <- Verdadero;
				De Otro Modo:
					Escribir "La opción ingresada no es válida, reintente";
			Fin Segun
		Mientras Que bandera == Falso;
		
		bandera <- Falso;
		Escribir "";
		Repetir
			Escribir "Ingrese un horario disponible: ";
			Leer horario;
			Segun horario Hacer
				"1","2","3","4","5","6","7","8":
					bandera <- Verdadero;
				De Otro Modo:
					Escribir "La opción ingresada no es válida, reintente";
			Fin Segun
		Mientras Que bandera == Falso;
		
		bandera <- Falso;
		Si arrayL[ConvertirANumero(dia)-1,ConvertirANumero(horario)-1] == Verdadero Entonces
			Si ingresardatos(arrayPacientes, num) Entonces
				Si elegirvacunas(arrayV, cant, arrayPacientes, num) == Verdadero Entonces
					Escribir "";
					Escribir "Turno confirmado!";
					arrayL[ConvertirANumero(dia)-1,ConvertirANumero(horario)-1] <- Falso;
					arrayPacientes[num,5] <- arrayD[ConvertirANumero(dia)-1];
					arrayPacientes[num,6] <- arrayH[ConvertirANumero(dia)-1,ConvertirANumero(horario)-1];
					mostrarDatos(arrayPacientes, num);
					num <- num + 1;
				Fin Si
			Fin Si
		SiNo 
			Escribir "Turno ocupado";
		FinSi
		
		Repetir
			Escribir "¿Desea cargar otro turno? (si/no)";
			Leer continuar;
			Si Mayusculas(continuar) <> "SI" Y Mayusculas(continuar) <> "NO" Entonces
				escribir "La opción ingresada es inválida, reintente";
			Fin Si
		Mientras Que Mayusculas(continuar) <> "SI" Y Mayusculas(continuar) <> "NO";
	Mientras Que Mayusculas(continuar) == "SI";
FinSubProceso

Funcion valido <- ingresardatos(arrayPacientes, num)
	Definir valido Como Logico;
	Definir dniIngresado, digito Como Cadena;
	
	Escribir "Ingrese su DNI:";
	Leer dniIngresado;
	
	Si validarDNI(dniIngresado) Entonces
		Si buscarPaciente(arrayPacientes, num, dniIngresado) = 99 Entonces
			arrayPacientes[num,2] <- dniIngresado;
			valido <- Verdadero;
		SiNo
			Escribir "El DNI ingresado ya posee un turno reservado";
			valido <- Falso;
		Fin Si
	SiNo
		Escribir "El DNI ingresado no es válido";
		valido <- Falso
	FinSi
	
	Si valido Entonces
		
		Repetir
			Escribir "Ingrese su nombre:";
			Leer arrayPacientes[num,0];
			Si arrayPacientes[num,0] == "" Entonces
				Escribir "El nombre no puede estar vacío";
			Fin Si
		Mientras Que arrayPacientes[num,0] == "";
		
		Repetir
			Escribir "Ingrese su apellido:";
			Leer arrayPacientes[num,1];
			Si arrayPacientes[num,1] == "" Entonces
				Escribir "El apellido no puede estar vacío";
			Fin Si
		Mientras Que arrayPacientes[num,1] == "";
		
		Repetir
			valido <- Verdadero;
			Escribir "Ingrese su edad:";
			Leer arrayPacientes[num,3];
			
			Para i<-0 Hasta longitud(arrayPacientes[num,3])-1 Con Paso 1 Hacer
				digito <- subcadena(arrayPacientes[num,3],i,i)
				Si digito <> "0" Y digito <> "1" Y digito <> "2" Y digito <> "3" Y digito <> "4" Y digito <> "5" Y digito <> "6" Y digito <> "7" Y digito <> "8" Y digito <> "9" Entonces
					valido <- Falso;
					//digito <> "." Y 
				FinSi
			FinPara
			
			Si valido Entonces
				Si (ConvertirANumero(arrayPacientes[num,3])<=0 O ConvertirANumero(arrayPacientes[num,3])>=120) Entonces
					Escribir "Edad fuera de los parámentros";
					valido <- Falso;
				Fin Si
			SiNo
				Escribir "Edad inválida";
			FinSi
		Mientras que valido == Falso;
		Escribir "";
	Fin Si
FinFuncion

Funcion valido <- validarDNI(dni)
	Definir valido Como Logico;
	Definir dniunico Como Caracter;
	valido <- Verdadero;
	Si longitud(dni) >= 7 Y longitud(dni) <= 8 Entonces
		Para i<-0 Hasta longitud(dni)-1 Con Paso 1 Hacer
			dniunico <- subcadena(dni,i,i)
			Si dniunico <> "0" Y dniunico <> "1" Y dniunico <> "2" Y dniunico <> "3" Y dniunico <> "4" Y dniunico <> "5" Y dniunico <> "6" Y dniunico <> "7" Y dniunico <> "8" Y dniunico <> "9" Entonces
				valido <- Falso;
			FinSi
		FinPara
	SiNo
		valido <- Falso;
	FinSi
FinFuncion

SubProceso mostrarDatos(arrayPacientes,num)
	Escribir "";
	Escribir "Nombre y apellido: ", arrayPacientes[num,0]," ",arrayPacientes[num,1];
	Escribir "DNI: ", arrayPacientes[num,2];
	Escribir "Edad: ", arrayPacientes[num,3];
	Escribir "Vacuna: ", arrayPacientes[num,4];
	Escribir "Día: ", arrayPacientes[num,5];
	Escribir "Horario: ", arrayPacientes[num,6];
FinSubProceso

Funcion bandera <- elegirVacunas(arrayV, cant, arrayPacientes, num Por Referencia)
	Definir eleccion, aux Como Entero;
	Definir bandera Como Logico;
	
	bandera <- Falso;
	
	Repetir
		Escribir "Seleccione la vacuna a aplicar:";
		Para i<-0 hasta cant-1 Con Paso 1 Hacer
			escribir i+1," - ", arrayV[i,0];
		FinPara
		
		Escribir Sin Saltar "Elección: ";
		leer eleccion;
		
		Si eleccion >= 1 y eleccion <= 6 Entonces
			Si ConvertirANumero(arrayV[eleccion-1,1]) > 0 Entonces
				aux <- ConvertirANumero(arrayV[eleccion-1,1]);
				aux <- aux - 1;
				arrayV[eleccion-1,1] <- ConvertirATexto(aux);
				Escribir "Vacuna a colocar: ", arrayV[eleccion-1,0];
				arrayPacientes[num,4] <- arrayV[eleccion-1,0];
				bandera <- Verdadero;
			SiNo
				Escribir "Sin stock";
				
			FinSi
		SiNo 
			escribir "Eleccion incorrecta";
		FinSi
	Mientras Que eleccion < 1 O eleccion > 6;
FinFuncion

subproceso mostrarTurnosDisponibles(arrayH, arrayL, arrayD, n, m)
	escribir "Turnos disponibles:";
	para i<-0 hasta n-1 Hacer
		Escribir arrayD[i];
		para j<-0 hasta m-1 Hacer
			Si arrayL[i,j] == Verdadero Entonces
				Escribir sin saltar arrayH[i,j],"   ";
			SiNo
				Escribir sin saltar "         ";
			Fin Si
		FinPara
		Escribir "";
	FinPara
	Escribir "";
FinSubProceso

Funcion indice <- buscarPaciente(arrayPacientes, num, buscar)
	Definir encontrado Como Logico;
	Definir i, indice Como Entero;
	
	i <- 0;
	encontrado <- Falso
	Repetir
		Si arrayPacientes[i,2] == buscar Entonces
			Escribir "";
			Escribir "DNI existente";
			encontrado <- Verdadero;
		Fin Si
		i<-i+1;
	Mientras Que i < num Y encontrado == Falso;
	
	Si encontrado == Falso Entonces
		indice <- 99
	SiNo
		indice <- i - 1;
	Fin Si
	
FinFuncion

Funcion disponible <- agendaCompleta(arrayL, n, m)
	Definir disponible Como Logico;
	disponible <- Falso;

	Para i<-0 Hasta n-1 Con Paso 1 Hacer
		Para j<-0 Hasta m-1 Con Paso 1 Hacer
			Si arrayL[i,j] == Verdadero Entonces
				disponible <- Verdadero;
			Fin Si
		Fin Para
	Fin Para
	
FinFuncion

SubProceso ordenarPacientesEdad(arrayPacientes, n, m)
	Definir posMenor Como Entero;
	Definir aux Como Cadena;
	
	Para i<-0 Hasta n-2 Con Paso 1 Hacer
		posMenor<-i;
		Para k<-i+1 Hasta n-1 Con Paso 1 Hacer
			Si ConvertirANumero(arrayPacientes[k,3]) < ConvertirANumero(arrayPacientes[posMenor,3]) Entonces
				posMenor<-k;
			Fin Si
		Fin Para
		Para j<-0 Hasta m-1 Con Paso 1 Hacer
			aux <- arrayPacientes[i,j];
			arrayPacientes[i,j] <- arrayPacientes[posMenor,j];
			arrayPacientes[posMenor,j] <- aux;
		Fin Para
	Fin Para
FinSubProceso

SubProceso ordenarPacientesVacuna(arrayPacientes, n, m)
	Definir posMenor Como Entero;
	Definir aux Como Cadena;
	
	Para i<-0 Hasta n-2 Con Paso 1 Hacer
		posMenor<-i;
		Para k<-i+1 Hasta n-1 Con Paso 1 Hacer
			Si arrayPacientes[k,4] < arrayPacientes[posMenor,4] Entonces
				posMenor<-k;
			Fin Si
		Fin Para
		Para j<-0 Hasta m-1 Con Paso 1 Hacer
			aux <- arrayPacientes[i,j];
			arrayPacientes[i,j] <- arrayPacientes[posMenor,j];
			arrayPacientes[posMenor,j] <- aux;
		Fin Para
	Fin Para
FinSubProceso

SubProceso mostrarListaPacientes(arrayPacientes, n, m)
	Para i<-0 Hasta n-1 Con Paso 1 Hacer
		Para j<-0 Hasta m-1 Con Paso 1 Hacer
				Escribir sin saltar arrayPacientes[i,j]," ----- ";
		Fin Para
		Escribir "";
	Fin Para
FinSubProceso

SubProceso mostrarListaPacientesDia(arrayPacientes, n, m, aux)
	Definir bandera Como Logico;
	bandera <- Falso;
	Para i<-0 Hasta n-1 Con Paso 1 Hacer
		Si arrayPacientes[i,5] == aux Entonces
			Para j<-0 Hasta m-1 Con Paso 1 Hacer
					Escribir sin saltar arrayPacientes[i,j]," ----- ";
			Fin Para
			Escribir "";
			bandera <- Verdadero;
		FinSi
	Fin Para
	Si bandera == Falso Entonces
		Escribir "No hay turnos reservados para ese día de la semana";
	Fin Si
FinSubProceso

SubProceso mostrarListaPacientesVacuna(arrayPacientes, n, m, aux)
	Definir bandera Como Logico;
	bandera <- Falso;
	Para i<-0 Hasta n-1 Con Paso 1 Hacer
		Si arrayPacientes[i,4] == aux Entonces
			Para j<-0 Hasta m-1 Con Paso 1 Hacer
				Escribir sin saltar arrayPacientes[i,j]," ----- ";
			Fin Para
			Escribir "";
			bandera <- Verdadero;
		FinSi
	Fin Para
	Si bandera == Falso Entonces
		Escribir "No hay turnos reservados para esa vacuna";
	Fin Si
FinSubProceso
	
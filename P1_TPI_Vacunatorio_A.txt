// gregar funcionalidad para que un mismo paciente no pueda reservar 2 turnos.
// verificar que no se pueda ingresar más turnos si la grilla ya se encuentra llena.
// agregar las funcionalidades de las consignas 4 y 5.
// recordr mostrar un mensaje de despedida al cerrar el programa.

Algoritmo Vacunatorio
	
	//variables p/datos del sistema
	Definir dias, horarios, maxTurnos, numeracionTurnos Como Entero;
	
	//arreglos p/datos del sistema.
	Definir conteoVacunas, cantidadVacunas Como Entero;
	Definir salir, eleccion, nombresVacunas, disponibilidadAgenda, diasSemana, stockVacunas Como Cadena;
	Definir agendaTurnos Como Logico;
	
	//arreglos p/datos de los pacientes. Las columnas corresponden a:
	//0 = Nombre
	//1 = Apellido
	//2 = DNI
	//3 = Edad
	//4 = Vacunas
	//5 = Dia
	//6 = Horario
	Definir datosPacientes Como Cadena;
	
	stockVacunas <- "1";
	cantidadVacunas <- 6;
	horarios <- 8;
	dias <- 5;
	maxTurnos <- 40;
	numeracionTurnos <- 0;
	
	Dimension nombresVacunas[cantidadVacunas,2];
	Dimension disponibilidadAgenda[dias,horarios];
	Dimension diasSemana[dias];
	Dimension agendaTurnos[dias,horarios];
	Dimension conteoVacunas[cantidadVacunas];
	
	Dimension datosPacientes[maxTurnos,7];
	
	inicializarAgenda(disponibilidadAgenda, agendaTurnos, diasSemana, nombresVacunas, dias, horarios, stockVacunas);
	
	Repetir
		Limpiar Pantalla;
		Escribir "Bienvenido al centro vacunatorio Sur2";
		Escribir "-Ingrese el N° de la opción deseada, o ingrese SALIR para cerrar la aplicación-";
		Escribir "1 - Reserva turno";
		Escribir "2 - Buscar Paciente";
		Escribir "3 - Ver agenda vacunatorio";
		Escribir "4 - Ordenar y mostrar lista pacientes";
		Escribir "      a. Por edad";
		Escribir "      b. Por vacuna a aplicar";
		Escribir "5 - Listado/s";
		Escribir "      a. Cantidad turnos otorgados por día";
		Escribir "      b. Cantidad de vacunas a aplicar por vacuna";
		Escribir "";
		Escribir Sin Saltar "Elección: ";
		
		Leer eleccion;
		
		Si Mayusculas(eleccion) <> "SALIR" Entonces
			Segun eleccion
				"1":
					cargarAgenda(datosPacientes, disponibilidadAgenda, nombresVacunas, cantidadVacunas, agendaTurnos, diasSemana, dias, horarios, numeracionTurnos);
				"2":
					buscarPaciente(datosPacientes, numeracionTurnos);
					Esperar Tecla;
				"3":
					Escribir "";
					mostrarTurnosDisponibles(disponibilidadAgenda, agendaTurnos, diasSemana, dias, horarios);
					Esperar Tecla;
				"4":
					
				"5":
					
				De Otro Modo:
					Escribir "La opción ingresada no es correcta. Reintente";
					Esperar Tecla;
			FinSegun
		Fin Si
	Mientras Que Mayusculas(eleccion) <> "SALIR";
	
FinAlgoritmo

SubProceso inicializarAgenda(arrayH, arrayL, arrayD, arrayV, n, m, stock)
	arrayH[0,0] <- "1.8:00";
	arrayH[0,1] <- "2.8:30";
	arrayH[0,2] <- "3.9:00";
	arrayH[0,3] <- "4.9:30";
	arrayH[0,4] <- "5.10:00";
	arrayH[0,5] <- "6.10:30";
	arrayH[0,6] <- "7.11:00";
	arrayH[0,7] <- "8.11:30";
	arrayH[1,0] <- "1.8:00";
	arrayH[1,1] <- "2.8:30";
    arrayH[1,2] <- "3.9:00";
	arrayH[1,3] <- "4.9:30";
	arrayH[1,4] <- "5.10:00";
	arrayH[1,5] <- "6.10:30";
	arrayH[1,6] <- "7.11:00";
	arrayH[1,7] <- "8.11:30";
	arrayH[2,0] <- "1.8:00";
    arrayH[2,1] <- "2.8:30";
	arrayH[2,2] <- "3.9:00";
	arrayH[2,3] <- "4.9:30";
	arrayH[2,4] <- "5.10:00";
	arrayH[2,5] <- "6.10:30";
	arrayH[2,6] <- "7.11:00";
	arrayH[2,7] <- "8.11:30";
	arrayH[3,0] <- "1.8:00";
    arrayH[3,1] <- "2.8:30";
	arrayH[3,2] <- "3.9:00";
	arrayH[3,3] <- "4.9:30";
	arrayH[3,4] <- "5.10:00";
	arrayH[3,5] <- "6.10:30";
	arrayH[3,6] <- "7.11:00";
	arrayH[3,7] <- "8.11:30";
	arrayH[4,0] <- "1.8:00";
    arrayH[4,1] <- "2.8:30";
	arrayH[4,2] <- "3.9:00";
	arrayH[4,3] <- "4.9:30";
	arrayH[4,4] <- "5.10:00";
	arrayH[4,5] <- "6.10:30";
	arrayH[4,6] <- "7.11:00";
	arrayH[4,7] <- "8.11:30";
	
	arrayD[0] <- "Lunes";
	arrayD[1] <- "Martes";
	arrayD[2] <- "Miercoles";
	arrayD[3] <- "Jueves";
	arrayD[4] <- "Viernes";
	
	arrayV[0,0] <- "Neumococo conjugada";
	arrayV[1,0] <- "Poliomielitis (IPV o Salk)";
	arrayV[2,0] <- "Quintuple (o pentavalente)";
	arrayV[3,0] <- "Rotavirus";
	arrayV[4,0] <- "Meningococo";
	arrayV[5,0] <- "Triple Viral";
	arrayV[0,1] <- stock;
	arrayV[1,1] <- stock;
	arrayV[2,1] <- stock;
	arrayV[3,1] <- stock;
	arrayV[4,1] <- stock;
	arrayV[5,1] <- stock;
	
	Para i<-0 hasta n-1 con paso 1 Hacer
		Para j<-0 hasta m-1 con paso 1 hacer
			arrayL[i,j] <- Verdadero;
		FinPara
	FinPara
	
FinSubProceso

SubProceso cargarAgenda(arrayPacientes, arrayH, arrayV, cant, arrayL, arrayD, n, m, num Por Referencia)
	
	Definir continuar, dia, horario Como Caracter;
	Definir bandera Como Logico;
	bandera <- Falso;
	
	Repetir
		Limpiar Pantalla
		mostrarturnosdisponibles(arrayH, arrayL, arrayD, n, m);
		
		Repetir
			Escribir "Ingrese el dia del turno";
			Para i<-0 Hasta n-1 Con Paso 1 Hacer
				Escribir i+1, " - ", arrayD[i];
			Fin Para
			Escribir Sin Saltar "Opción: ";
			Leer dia;
			Segun dia Hacer
				"1","2","3","4","5":
					bandera <- Verdadero;
				De Otro Modo:
					Escribir "La opción ingresada no es válida, reintente";
			Fin Segun
		Mientras Que bandera == Falso;
		
		bandera <- Falso;
		Escribir "";
		Repetir
			Escribir "Ingrese un horario disponible: ";
			Leer horario;
			Segun horario Hacer
				"1","2","3","4","5","6","7","8":
					bandera <- Verdadero;
				De Otro Modo:
					Escribir "La opción ingresada no es válida, reintente";
			Fin Segun
		Mientras Que bandera == Falso;
		
		Si arrayL[ConvertirANumero(dia)-1,ConvertirANumero(horario)-1] == Verdadero Entonces
			ingresardatos(arrayPacientes, num);
			//mostrarDatos(nombre, apellido, dni, edad);
			Si elegirvacunas(arrayV, cant, arrayPacientes, num) == Verdadero Entonces
				Escribir "";
				Escribir "Turno confirmado!";
				arrayL[ConvertirANumero(dia)-1,ConvertirANumero(horario)-1] <- Falso;
				arrayPacientes[num,5] <- arrayD[ConvertirANumero(dia)-1];
				arrayPacientes[num,6] <- arrayH[ConvertirANumero(dia)-1,ConvertirANumero(horario)-1];
				mostrarDatos(arrayPacientes, num);
				num <- num + 1;
			Fin Si
		SiNo 
			Escribir "Turno ocupado";
		FinSi
		
		Repetir
			Escribir "¿Desea cargar otro turno? (si/no)";
			//Escribir "Desea SALIR?";
			Leer continuar;
			Si Mayusculas(continuar) <> "SI" Y Mayusculas(continuar) <> "NO" Entonces
				escribir "La opción ingresada es inválida, reintente";
			Fin Si
		Mientras Que Mayusculas(continuar) <> "SI" Y Mayusculas(continuar) <> "NO";
	Mientras Que Mayusculas(continuar) == "SI";
FinSubProceso

SubProceso ingresardatos(arrayPacientes, num)
	Definir valido Como Logico;
	
	Escribir "Ingrese su nombre:";
	Leer arrayPacientes[num,0];
	Escribir "Ingrese su apellido:";
	Leer arrayPacientes[num,1];
	
	Repetir
		Escribir "Ingrese su DNI:";
		Leer arrayPacientes[num,2];
		valido <- validardni(arrayPacientes, num);
		//busqueda
		Si No valido Entonces
			Escribir "El DNI ingresado no es válido";
		FinSi
		
	Mientras Que No valido;
	
	Repetir
		Escribir "Ingrese su edad:";
		Leer arrayPacientes[num,3];
		Si ConvertirANumero(arrayPacientes[num,3])<0 O ConvertirANumero(arrayPacientes[num,3])>110 Entonces
			Escribir"edad fuera de los paramentros"
		FinSi
	Mientras que ConvertirANumero(arrayPacientes[num,3])<0 O ConvertirANumero(arrayPacientes[num,3])>110;
	Escribir "";
FinSubProceso

Funcion dnivalido<-validardni(arrayPacientes, num)
	Definir dnivalido Como Logico;
	Definir dniunico Como Caracter;
	dnivalido <- Verdadero;
	Si longitud(arrayPacientes[num,2]) >= 7 Y longitud(arrayPacientes[num,2]) <= 8 Entonces
		Para i<-0 Hasta longitud(arrayPacientes[num,2])-1 Con Paso 1 Hacer
			dniunico <- subcadena(arrayPacientes[num,2],i,i)
			Si dniunico <> "0" Y dniunico <> "1" Y dniunico <> "2" Y dniunico <> "3" Y dniunico <> "4" Y dniunico <> "5" Y dniunico <> "6" Y dniunico <> "7" Y dniunico <> "8" Y dniunico <> "9" Entonces
				dnivalido <- Falso;
			FinSi
		FinPara
	SiNo
		dnivalido <- Falso;
	finsi
FinFuncion

SubProceso mostrarDatos(arrayPacientes,num)
	Escribir "";
	Escribir "Nombre y apellido: ", arrayPacientes[num,0];
	Escribir "Apellido: ", arrayPacientes[num,1];
	Escribir "Edad: ", arrayPacientes[num,2];
	Escribir "DNI: ", arrayPacientes[num,3];
	Escribir "Vacuna: ", arrayPacientes[num,4];
	Escribir "Día: ", arrayPacientes[num,5];
	Escribir "Horario: ", arrayPacientes[num,6];
FinSubProceso

Funcion bandera <- elegirVacunas(arrayV, cant, arrayPacientes, num Por Referencia)
	Definir eleccion, aux Como Entero;
	Definir bandera Como Logico;
	
	bandera <- Falso;
	
	Repetir
		Escribir "Seleccione la vacuna a aplicar:";
		Para i<-0 hasta cant-1 Con Paso 1 Hacer
			escribir i+1," - ", arrayV[i,0];
		FinPara
		
		Escribir Sin Saltar "Elección: ";
		leer eleccion;
		
		Si eleccion >= 1 y eleccion <= 6 Entonces
			Si ConvertirANumero(arrayV[eleccion-1,1]) > 0 Entonces
				aux <- ConvertirANumero(arrayV[eleccion-1,1]);
				aux <- aux - 1;
				arrayV[eleccion-1,1] <- ConvertirATexto(aux);
				Escribir "Vacuna a colocar: ", arrayV[eleccion-1,0];
				arrayPacientes[num,4] <- arrayV[eleccion-1,0];
				bandera <- Verdadero;
			SiNo
				Escribir "Sin stock";
			FinSi
		SiNo 
			escribir "Eleccion incorrecta";
		FinSi
	Mientras Que eleccion < 1 O eleccion > 6;
FinFuncion

subproceso mostrarTurnosDisponibles(arrayH, arrayL, arrayD, n, m)
	escribir "Turnos disponibles:";
	para i<-0 hasta n-1 Hacer
		Escribir arrayD[i];
		para j<-0 hasta m-1 Hacer
			Si arrayL[i,j] == Verdadero Entonces
				Escribir sin saltar arrayH[i,j],"   ";
			SiNo
				Escribir sin saltar "         ";
			Fin Si
		FinPara
		Escribir "";
	FinPara
	Escribir "";
FinSubProceso

SubProceso buscarPaciente(arrayPacientes, num)
	Definir dniABuscar Como Cadena;
	Definir encontrado Como Logico;
	Definir i Como Entero;
	
	Escribir "";
	escribir "Ingrese el DNI del paciente a buscar:";
	leer dniABuscar;
	
	i <- 0;
	encontrado <- Falso
	Repetir
		Si arrayPacientes[i,2] == dniABuscar Entonces
			Escribir "";
			Escribir "DNI encontrado";
			encontrado <- Verdadero;
			mostrarDatos(arrayPacientes,i)
		Fin Si
		i<-i+1;
	Mientras Que i<=num Y encontrado == Falso;
	
	Si encontrado == Falso Entonces
		Escribir "El DNI ingresado no se encuentra en la base de datos";
	Fin Si
	
FinSubProceso